
columns:['image', 'description']
No such comm: dc66f28e98b54ec38d019433bfbf77d5
No such comm: ec6c2fa3d9ed405990358f0ff4b942f7
No such comm: f207ecd508b740e289fd2f7452efd853
No such comm: 132deb14e79841f981a79b6b93a7f49f
No such comm: 956f554496064c4fa3ec94e42ae9a765
No such comm: 6f1cba32939f417c98867f9b7f756931
No such comm: a65dba3d1dc14b7e92285356468e714e
No such comm: e58ce2aa25c74032957fc2b300170a68
No such comm: 8333a1737c004b0dbaa586f5e993e8ab
No such comm: f34c29767533484cb508fc1dd0e9a103
No such comm: 9a36e832f38940148567a7c75acacaa8
No such comm: af9c9a02672b4e44acbb22b8f028671d
No such comm: 20136e74f55e4f11b5c1d6ca432eee37
No such comm: 1caffd302f6649e6b4d4ebdd61b6d6df
No such comm: 14e19ac45ecb4ccbaf82d3702ebf2e9d
No such comm: b9cc89251fba433cb71d36a99e3e1f54
















 94%|█████████▎| 2807/3000 [00:33<00:02, 80.34it/s]
mean and std before normalize:


Mean of the image: tensor([0.4685, 0.3801, 0.3472])
Std of the image: tensor([0.2129, 0.1872, 0.1589])
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Label: tensor([[  3,   4,   5,   6,   7,   8,   6,   9,  10,   4,  11,  12,  13,  14,
          15,  16,  17,  18,   6,  19,  20,  21,  22,  23,  24,  25,  26,  17,
          27,  13,  28,  29,  30,  16,   6,  31,  32,   5,  33,  23,  34,  23,
          35,  36,  37,  38,  39,  40,  21,   6],
        [  6,  41,  42,   8,  43,  44,  45,  46,  47,   6,  48,   8,  49,  50,
          51,  16,  52,  53,  54,  55,  56,  57,  58,  59,  11,  60,   6,  61,
          11,  62,   8,  63,  64,  65,  16,  66,  67,  68,  69,  70,  71,  25,
          72,  73,  74,   6,  75,  25,  76,   6],
        [ 77,  11,  78,   8,  79,  80,   6,  81,  82,   8,  83,  84,  85,  16,
          17,  86,  87,  49,  88,  89,  78,  11,  90,  91,  16,  92,   6,  89,
          78,  25,  93,  94,  95,  96,  97,  98,  83,  99,  21, 100, 101, 102,
          66, 103,  52,  25, 104, 105,  66,   6],
        [ 54, 106,  25, 107, 108,   6, 109,   8, 110, 111, 112,  23, 113,  23,
         114, 115, 116, 117, 118,  25,   5,  33,  13,   6, 119,   8,   6, 120,
          84, 121,  25, 122, 123, 124, 115, 125, 126, 118,  16,   6, 127, 128,
          53,   6, 129, 130, 131, 132,   8, 133],
        [ 54, 134,  46,  49, 135,  25,  38, 136, 137,   8,   6, 138,   8, 139,
         140,  25, 141, 142,  23, 143, 144,   6, 145,  25,  13, 146, 147,  76,
         148, 149, 150,  25, 151,  25,  11, 152, 153,  16, 154, 154, 154, 154,
         154, 154, 154, 154, 154, 154, 154, 154],
        [  6, 155, 156,   8,   6, 157, 158, 159,  46, 160,  53,  49, 161, 162,
         163,  49, 164,   8, 165, 166,  16, 167,   6, 168, 169,   8, 170, 171,
          25,   6, 172, 173, 174, 175, 176,   6, 177,  25, 178, 179,  66, 170,
         180, 181,  16, 182, 183,  13, 184, 185],
        [ 54, 186, 187,   6, 188, 189, 190,  53,   6, 191,   8, 192, 193, 194,
         195, 115, 196, 197,  25, 198, 199, 118, 200, 201, 202, 200, 203, 204,
         205, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
         154, 154, 154, 154, 154, 154, 154, 154],
        [203, 206,   6, 207,  46, 160,  53,   6, 208, 209,   8,   6, 210, 211,
          25, 212,  53,   6, 213, 209, 203, 206,   6, 214, 215, 216, 217,  16,
         218,  58, 219, 220,  82,   8,  49,  52, 141,  23, 221, 222,   6, 223,
          21,  49, 224, 225,  92, 226, 227, 228],
        [127, 229,  23,   6, 230,   8, 231, 232,   6, 127, 233, 234,   8,  54,
         235,  33,  92, 236, 237,   8, 238,  25, 239,   8, 240,  16,   6, 229,
         131,   6,  95, 200,   6, 241, 242, 243,   8, 244,  21, 245, 246,  11,
         231, 247, 248, 249, 247, 231, 250, 251],
        [  6, 252, 253, 254,  25, 255,  84, 256, 257,  11, 258, 259, 260, 261,
          21, 262, 263,  53,  72, 264,  16, 254, 265,  35, 266, 267,  21,   6,
         268, 269,  25, 270,   6, 271, 272, 273,   6, 274,  16, 154, 154, 154,
         154, 154, 154, 154, 154, 154, 154, 154],
        [ 54, 186,   5,  82,   8,   6, 275, 272, 276,  21,  49, 277,   8,   6,
         278,  11, 279,  13, 127, 128, 115, 280,  76,   6, 281, 123, 282, 283,
         284, 118,  25, 285,  92,   6, 109,   8, 110, 286,  23, 287, 288,   6,
         289, 275, 130, 290, 291, 108,   6, 230],
        [ 66, 292, 293, 294, 295, 141, 296, 297,  13,   6, 298,   8,   6, 299,
          25,   6, 300, 301, 302, 303, 304,  35, 305,   8, 306,  16,  54, 307,
         308, 253,   6, 309,   8, 302, 303,  84, 310,  25,   6, 311, 120, 312,
         313,  16, 154, 154, 154, 154, 154, 154],
        [  6, 308, 253, 314,   8,   6,  63, 315, 316, 317, 318,  23,   6, 319,
         320,   5, 321,  25, 322,  25,  11, 323, 324,   8, 325, 326, 327,  49,
         328, 329,  23,   6, 330, 331,  16,  17, 332,   6, 333,   8,  57, 105,
           8, 334, 115, 335, 118,  16, 154, 154],
        [  6,  41,  42,   8,  43,  44,  45,  46,  47,   6,  48,   8,  49,  50,
          51,  16,  52,  53,  54,  55,  56,  57,  58,  59,  11,  60,   6,  61,
          11,  62,   8,  63,  64,  65,  16,  66,  67,  68,  69,  70,  71,  25,
          72,  73,  74,   6,  75,  25,  76,   6],
        [  6, 336, 337,   5, 338,  23, 339,  66, 122, 336,  23, 256, 289, 340,
          74,   6,  75,   8,   6, 341, 342, 283, 343, 302, 344, 345,  11, 346,
           8, 347, 247, 348, 349,  21, 350, 351,   6, 352, 353,  25, 354,   6,
         323, 355, 356,  25,  13,   6, 357, 115],
        [358,  98, 359,   5,  35, 143, 360,  11,   6, 361,   8, 362,  98, 363,
          16,  17, 364,  86, 228,  11, 365, 291,  16,  17, 366,  23, 367, 219,
          11,   5, 368, 369,  21, 370, 371,  21, 372,  86,  66,  72, 373,  58,
         130,  25, 374,  11, 279,  13, 375,  11]])
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Label: <generator object <genexpr> at 0x0000024830BE8200>
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Label: tensor([[1353,    5, 1354,  247,  868,   23, 1355,   25,   17, 1356,   74,    6,
         1357, 1358, 1359,   23,  563,   11, 1360,   53,   21, 1361,   49, 1362,
          309,   53,    6, 1363,    8,  515, 1364,  186,   16, 1365,   25,   49,
          546, 1366,    8,   72,   52,   11,   49, 1367, 1368,   25,  982, 1369,
           13,  263],
        [  23,    6, 1319,   82,    8,    6, 1370,  738,   46,   49, 1371,  200,
          514, 1098,   25,  332,   66,    6,  797, 1372,   11,    6,  861, 1373,
           16,  987, 1374,   16,  517,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154],
        [  49, 1375,  699,   25,   13, 1376,  919, 1377, 1378,   23,  170, 1379,
           25,   11,   49, 1148, 1380,   53,    6, 1381,   16,  994,  995, 1382,
          215, 1383, 1384, 1385, 1386,  247,  182,  100,  101, 1387, 1388,  141,
          170, 1389,  215,  216, 1390, 1391,   16,    6, 1392, 1393,   21,    6,
          208, 1394],
        [1326, 1327,   84,  546, 1395,   21,  186,    5,   72, 1181,    8,  228,
         1396,   76,  974,  182,  540, 1397,  745, 1398,  291,   25, 1399, 1367,
           23,   54, 1400,   21,    6,  925, 1401,    8,    6, 1180,   16, 1327,
         1311,   21, 1402, 1403,  228, 1396,  272, 1404, 1405,  263,   21, 1406,
         1407,   11],
        [ 323, 1408, 1409, 1410,    8, 1411,  115, 1412,  118,    5,   49,  257,
            8,  323,  355,   25, 1413, 1414,  538,  343,    8, 1411,   11,   72,
          504,  656,   25, 1415, 1416,    8, 1417,   16,  610, 1418,    6,  121,
           11, 1419,    8,    6,  323,  355,    8, 1420, 1056,  608, 1421,   21,
            6, 1419],
        [  54,  186,  410,    6, 1422,   25,    6,  452, 1423, 1424,   23,    6,
         1425,   25,   11,  738,  950,   21,  216,   49, 1426, 1427,    8,  615,
         1428, 1429,   23,    6,   52,   16,    6, 1424,    5, 1430, 1431,   11,
         1388,    5,   49, 1285,    8, 1432,   92,    6, 1433,   21, 1434,   11,
         1435,   25],
        [   6,  786, 1436, 1437,    8,    6, 1438, 1439, 1440,   23,  325,   25,
         1441,   66, 1442, 1443,   23, 1444,   25,    5, 1445,   13,   49,  823,
          186,   66, 1137, 1446,   25,  626,    6, 1447,    8,    6, 1448, 1449,
           16,    6,  308,  253,    6,  458,  391,   92,    6, 1082,  115,  272,
           46, 1450],
        [  54,  509,    5,  285,   92,    6, 1451,    8,    6, 1452,  354,  348,
            5, 1453,  108, 1454,   21, 1455,   16,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154],
        [   6,  252, 1456,    6, 1457,    8, 1458,   16,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154],
        [  28,    8,    6,  797, 1009, 1459,   23,    6, 1460, 1461,   11, 1462,
         1463, 1464, 1465, 1466,  336,   11, 1467, 1468,   21,  216,    6,  584,
         1207,    8,  392,   16,  218, 1009,  102, 1469,  823, 1470, 1471,  344,
           23,    6,  458,   82,    8,    6, 1472,  461,   16,    6, 1473,   21,
         1474,  507],
        [   8,  105,  477,   84, 1475,   11, 1476,  348,   46, 1477, 1478,   52,
           46, 1155, 1479,   40,   21,  141,    8,    6,  310,   23,   37,   16,
           17,   46, 1480,   76, 1481,   12,   92,   28,   19,  610, 1482,   23,
          477,   84, 1483,   23, 1484,   25,   11,   23,   72,  847,  596,   17,
          368,  724],
        [1485, 1486,   84, 1487, 1488,  507,  256,   72, 1489, 1181,    8,  372,
           25,  438,   87,  219,   25,   21,  272,   17,  368, 1490, 1491,   11,
         1492, 1493, 1207,   16,    6,  978,   23,    6, 1494,   46, 1495,   49,
         1037,    8,   49, 1496,  280,   21,    6,  360,   16,  154,  154,  154,
          154,  154],
        [  54,  186,    5,  590, 1497,   21,  148, 1498,   25,    6, 1499,   98,
         1500,   16,  597,  830, 1501, 1450, 1502,   21, 1503,   98, 1504,  400,
            8,   54,  308,   46, 1178,   23,  186,   16,    6, 1505, 1506, 1507,
           53,    6,  208,   53,   58, 1508,  141,  220,   49, 1509,  425, 1510,
          344,   21],
        [  54, 1015,    8, 1117,   11, 1116,  893,   66, 1137, 1511, 1512,   46,
            6, 1513,    8, 1514,  893,  186,   87,  982,   23,    6, 1515, 1162,
           16,    6, 1516,  131,   58,    8,    6,  360,   84,   63, 1517,  601,
           78,   11,   76,  146,  220,    6, 1518,    8, 1519, 1520,    8, 1512,
           84,   85],
        [   6,  696, 1521,   11, 1522,   74,   49, 1523,    5,   86,   23,    6,
          701,   25,  144,   49, 1524,    8,    6,  360,   84,  443,  272, 1525,
          832,  610, 1526,  927, 1527,   16,    6,   52,  253,   49, 1528, 1529,
           13,   49, 1530,  699, 1531,  176,  348, 1478, 1285,  950,   21,  216,
            6, 1523],
        [1532, 1533,    5,   49, 1534, 1535, 1536,   23, 1537,  563,   11,   49,
         1538, 1539,    8,    6, 1540,   16,    6, 1541,  141,   17,   11,   72,
            7, 1542, 1441, 1059,    6, 1543, 1544, 1381,   16,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154]])
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torch\nn\init.py:412: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:01<?, ?it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Feature batch shape: torch.Size([16, 3, 256, 256])
Labels batch shape: 16
Label: tensor([[  3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,   8,  15,
          16,  17,  18,   6,  19,   8,  20,  21,  11,  22,  23,  24,  25,   8,
          26,  27,  28,  29,  30,   8,  31,  32,  33,  34,   6,  15,  35,  36,
           3,  37,  38,  39,  40,  41,  42,  24],
        [ 43,  44,  45,  46,  47,  48,  15,  49,   8,  15,  50,  51,  52,  53,
          32,  54,  55,  56,  48,  57,   8,  58,  27,  59,  15,  56,  44,  15,
          60,   8,  15,  61,  62,  63,  64,  65,  27,  66,  15,  67,  68,   8,
          15,  56,  67,  69,  63,  70,  71,  42],
        [ 15,  72,  73,  15,  74,   8,  15,  75,  27,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76],
        [  4,  77,  44,  15,  78,   8,  15,  79,  53,  32,  80,   6,  81,   3,
          15,  82,  27,  15,  67,  83,  84,  15,  85,  51,  86,  87,  88,   6,
          89,  15,   5,  53,  90,  91,  92,  93,  94,  56,  95,  96,  23,  97,
          98,  99, 100, 101,  15,  21, 102,  27],
        [ 32, 103, 104,   6,  53, 105, 106, 107, 108,   3, 109, 110,   6,  98,
          32, 111, 112,  48,  15, 113,  27, 114, 115, 116,  42, 117, 118, 119,
         120,  17, 121, 122, 123, 124, 125,  94, 109, 126,  42,  24, 127, 128,
          27,  15, 129, 130,  23,  15, 131, 132],
        [133, 134, 135,   6, 136,  51, 137,  98, 138,   6, 139, 140, 141,  23,
          15, 142, 143,   6,  53, 144,   3, 145, 146,   6,  94, 147, 148, 149,
          98, 150,  53, 151,  27,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76],
        [  4, 152,  44,  32, 153,   6, 154, 155, 156,   8,  15, 157,   8, 158,
         159,   6,  94, 160,   3, 161, 162,  15, 163,   6,  53, 164, 165, 166,
         167, 168, 169,   6, 170,   6,  98, 171, 172,  27,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76],
        [  4, 173, 174, 175,  15, 176,   8,  32, 177, 178,   8, 179, 101, 180,
         181,   3, 182,   6, 183,   6, 184, 185,  11, 186, 187,   3, 188, 189,
          27,  15, 190,  98, 191,  53, 192, 193,   3,  15, 194, 195, 196,  63,
         197,   8, 198, 199, 200, 201,  98, 202],
        [ 15, 203,   8,  15, 204, 205,  32, 206,   8,  67, 207,  27,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76],
        [ 15,  67, 208,   3,  15, 209, 199,  15, 210,   8,  40, 211,  98,  15,
         212,   8,  40, 211, 213, 214, 215,  32, 216, 199, 217, 213,   8, 218,
         219,  15, 220,   8,  40, 211,  27,  15, 221, 208,  11, 187,   3, 188,
         222, 223, 224,   3, 225,   6, 226,   3],
        [227,  51, 228, 229, 230,  44,  15, 231, 180, 232,   6, 233,   3, 234,
         235, 236, 237,  98, 238,   3, 239,  15, 240,   8,  15, 241,  98, 242,
         195,  45, 243,   8, 244, 245,  98, 246,  27,   3, 247,  15, 248, 249,
         231,   6, 227, 195, 250,  23, 251, 101],
        [ 15,  77,  44, 252,   8,  15, 216, 219,  15, 192, 253,   6, 254,   3,
          15, 255,  27,  43, 256,  19, 221, 257,   8,  15, 216,   3, 221, 222,
         199, 258,  27,   3, 259, 213, 260, 261, 199, 262, 263,   6, 264, 265,
         213, 223, 266, 267, 223,  15, 253,   6],
        [  3,  15, 268, 269,   8,  15, 270,  43,  44,  32, 271, 223, 272, 273,
           6, 274,  63,  15, 275, 276,  98,  15, 277, 278,  27, 279, 280, 281,
          76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
          76,  76,  76,  76,  76,  76,  76,  76],
        [  3, 282, 283,   6, 284, 285, 286,  32, 287,   8,  15, 288, 289,  53,
         290, 291,  27,  15, 292, 293, 294,  63,  15, 295, 296,   6, 297, 298,
         299, 199, 300, 301, 213,  98, 227,  51, 228, 230,   3,   4, 302,  15,
          80,   8,  15, 192, 303,  27,  15, 304],
        [305, 199,  81, 306, 213, 195,  45, 307, 308,   6, 309,   3, 310,  27,
         311, 312, 235, 313, 314,  98, 195, 315,  63, 316, 317,  98, 318, 319,
           6, 320, 321,  27, 311, 322, 323, 324,  17,   3, 325,   6, 326,   6,
         311, 195, 327, 328,  98, 329,   3, 330],
        [331, 332, 333, 175,  32, 334, 335, 336,   6, 337,  23, 122, 123,   3,
         338, 339,  15, 340, 341, 342,  27, 311, 343,   3, 344,  98, 345, 346,
           6,  98,  81, 347,   6, 101, 348, 349, 195,  32, 350, 351, 194,  27,
         352, 353, 354, 355, 101, 330, 356,  23]])
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:01<?, ?it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:01<?, ?it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/150 [00:01<?, ?it/s]


















100%|█████████▉| 399999/400000 [00:35<00:00, 11125.30it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:02<?, ?it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:02<?, ?it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)

  0%|          | 0/150 [00:02<?, ?it/s]

  0%|          | 0/150 [00:02<?, ?it/s]

  0%|          | 0/150 [00:02<?, ?it/s]
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
c:\Users\Fede\anaconda3\envs\tf\lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/150 [00:00<?, ?it/s]
torch.Size([16, 50, 400000])

  0%|          | 0/150 [00:02<?, ?it/s]
[nltk_data] Downloading package punkt to
[nltk_data]     C:\Users\Fede\AppData\Roaming\nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[34m[1mwandb[39m[22m: [33mWARNING[39m Calling wandb.login() after wandb.init() has no effect.